x-common-variables: &common-variables
  ASPNETCORE_ENVIRONMENT: Development
  OTEL_EXPORTER_OTLP_ENDPOINT: 'http://otel-collector:4317'
  #SEQ_ENDPOINT: 'http://seq:5341'

services:

## ---------------- .NET
  credit-api:
    image: ${DOCKER_REGISTRY-}dotnet-credit-api
    build:
      context: src\dotnet\credit-api
    ports:
      - 5010:80
    environment:
      <<: *common-variables
      APPLICATIONINSIGHTS_CONNECTION_STRING: ${APPLICATIONINSIGHTS_CONNECTION_STRING}
      USE_CONSOLE_LOG_OUTPUT: true
      USE_CONSOLE_JSON_LOG_OUTPUT: true
    depends_on:
      otel-collector:
        condition: service_started
  credit-api-dapr:
    image: daprio/daprd:1.11.4-mariner
    command: ["./daprd",
     "-app-id", "credit-api",
     "-app-port", "80",
     #"--log-level", "debug",
     "-resources-path", "./components",
     "-config", "./components/config.yaml"]   
    volumes:
      - "./dapr/docker-components/:/components"
    depends_on:
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      credit-api:
        condition: service_started
    network_mode: "service:credit-api"

  booking-processor-1:
    image: ${DOCKER_REGISTRY-}dotnet-booking-processor
    build:
      context: src\dotnet\booking-processor
    ports:
      - 5011:80
    environment:
      <<: *common-variables
      APPLICATIONINSIGHTS_CONNECTION_STRING: ${APPLICATIONINSIGHTS_CONNECTION_STRING}
    depends_on:
      otel-collector:
        condition: service_started
  booking-processor-dapr-1:
    image: daprio/daprd:1.11.4-mariner
    command: ["./daprd",
     "-app-id", "booking-processor",
     "-app-port", "80",
     #"--log-level", "debug",
     "-resources-path", "./components",
     "-config", "./components/config.yaml"]   
    volumes:
      - "./dapr/docker-components/:/components"
    depends_on:
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      booking-processor-1:
        condition: service_started
    network_mode: "service:booking-processor-1"

  booking-processor-2:
    image: ${DOCKER_REGISTRY-}dotnet-booking-processor
    build:
      context: src\dotnet\booking-processor
    ports:
      - 5012:80
    environment:
      <<: *common-variables
      APPLICATIONINSIGHTS_CONNECTION_STRING: ${APPLICATIONINSIGHTS_CONNECTION_STRING}
    depends_on:
      otel-collector:
        condition: service_started
  booking-processor-dapr-2:
    image: daprio/daprd:1.11.4-mariner
    command: ["./daprd",
     "-app-id", "booking-processor",
     "-app-port", "80",
     #"--log-level", "debug",
     "-resources-path", "./components",
     "-config", "./components/config.yaml"]   
    volumes:
      - "./dapr/docker-components/:/components"
    depends_on:
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      booking-processor-2:
        condition: service_started
    network_mode: "service:booking-processor-2"

  interest-rate-api:
    image: ${DOCKER_REGISTRY-}go-interest-rate-api
    build:
      context: src\go\interest-rate-api
    environment:
      SERVICE_NAME: interest-rate-api
      OTEL_EXPORTER_OTLP_ENDPOINT: 'otel-collector:4318'
      OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf'
      INSECURE_MODE: true
    depends_on:
      otel-collector:
        condition: service_started
  interest-rate-api-dapr:
    image: daprio/daprd:1.11.4-mariner
    command: ["./daprd",
     "-app-id", "interest-rate-api",
     "-app-port", "80",
     "-resources-path", "./components"]   
    volumes:
      - "./dapr/docker-components/:/components"
    depends_on:
      interest-rate-api:
        condition: service_started
      otel-collector:
        condition: service_started
    network_mode: "service:interest-rate-api"

    
  currency-rate-api:
    image: ${DOCKER_REGISTRY-}java-currency-rate-api
    build:
      context: src\java\currency-rate-api
    ports:
      - 5020:8080
    environment:
      OTEL_SERVICE_NAME: "currency-rate-api"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_LOGS_EXPORTER: "otlp"
      OTEL_TRACES_EXPORTER: "otlp"
      OTEL_METRICS_EXPORTER: "otlp"
      JAVA_TOOL_OPTIONS: "-javaagent:opentelemetry-javaagent.jar"
      OTEL_RESOURCE_ATTRIBUTES: "application=currency-rate-api,team=team java"
      # APPLICATIONINSIGHTS_CONNECTION_STRING: ${APPLICATIONINSIGHTS_CONNECTION_STRING}
      # JAVA_TOOL_OPTIONS: "-javaagent:applicationinsights-agent-3.4.17.jar"
    depends_on:
      otel-collector:
        condition: service_started
  currency-rate-api-dapr:
    image: daprio/daprd:1.11.4-mariner
    command: ["./daprd",
     "-app-id", "currency-rate-api",
     "-app-port", "8080",
     "-resources-path", "./components"]   
    volumes:
      - "./dapr/docker-components/:/components"
    depends_on:
      currency-rate-api:
        condition: service_started
      otel-collector:
        condition: service_started
    network_mode: "service:currency-rate-api"

## ----------------- Infra

  redis:
    image: redis:7.2.1-alpine
    ports:
      - 6380:6379
  
  redis-exporter:
    image: oliver006/redis_exporter:v1.54.0-alpine

    ports:
      - 9121:9121
    environment:
      REDIS_ADDR: redis:6379

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.0.0
  #   ports:
  #     - 2181:2181
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - 9092:9092
      - 9101:9101
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 30
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid" 
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk' # Cluster id from confluent documentation
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "9092"]
      interval: 2s
      timeout: 2s
      retries: 15
      
  kafka-exporter:
    image: bitnami/kafka-exporter:1.7.0
    restart: unless-stopped
    command: --kafka.server=kafka:29092  #--log.enable-sarama #--concurrent.enable #--verbosity=2
    depends_on:
      kafka:
        condition: service_healthy
  
  kafka-drop:
    image: obsidiandynamics/kafdrop:4.0.0
    depends_on:
      - kafka
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
      JVM_OPTS: "-Xms32M -Xmx64M"

  zipkin:
    image: openzipkin/zipkin:2.24
    ports:
      - 9412:9411
    environment:
      JAVA_OPTS: '-Xms1g -Xmx1g -XX:+ExitOnOutOfMemoryError'

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.89.0
    command: ["--config=conf/config.yaml"]
    environment:
      - APPLICATIONINSIGHTS_INSTRUMENTATION_KEY=${APPLICATIONINSIGHTS_INSTRUMENTATION_KEY}
    volumes:
      - ./docker/otel-collector-config.yaml:/conf/config.yaml
    depends_on:
      - zipkin
      - seq
      - prometheus

  # otel-prom-remote-write:
  #   image: mcr.microsoft.com/azuremonitor/prometheus/promdev/prom-remotewrite:prom-remotewrite-20230906.1
  #   environment:
  #     INGESTION_URL: ${AZURE_MONITOR_INGESTION_URL}
  #     LISTENING_PORT: 8081
  #     IDENTITY_TYPE: aadApplication
  #     AZURE_CLIENT_ID: ${AZURE_CLIENT_ID}
  #     AZURE_CLIENT_CERTIFICATE_PATH: /certs/pfxcert.pfx
  #     AZURE_TENANT_ID: ${AZURE_TENANT_ID}
  #     CLUSTER: 'ACA'
  #   volumes:
  #     - ./certs/pfxcert.pfx:/certs/pfxcert.pfx

  seq:
    image: datalust/seq:2023.4
    ports:
      - 5341:80
    environment:
      - ACCEPT_EULA=Y

  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - 9090:9090
    command: 
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--enable-feature=otlp-write-receiver'
      - '--web.enable-lifecycle'
      - '--web.enable-remote-write-receiver'
      - '--storage.tsdb.retention.time=1d'
  
  grafana:
    image: grafana/grafana:10.1.4
    ports:
      - 3000:3000
    



## ---------------- GO
  # credit-api:
  #   image: ${DOCKER_REGISTRY-}go-credit-api
  #   build:
  #     context: src\go\credit-api
  #   ports:
  #     - 8081:8081
  # credit-api-dapr:
  #   image: daprio/daprd:edge
  #   command: ["./daprd",
  #    "-app-id", "credit-api",
  #    "-app-port", "8081",
  #    "-components-path", "./components"]   
  #   volumes:
  #     - "./dapr/docker-components/:/components"
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #     credit-api:
  #       condition: service_started
  #   network_mode: "service:credit-api"

  # booking-processor-1:
  #   image: ${DOCKER_REGISTRY-}go-booking-processor
  #   build:
  #     context: src\go\booking-processor
  # booking-processor-dapr-1:
  #   image: daprio/daprd:edge
  #   command: ["./daprd",
  #    "-app-id", "booking-processor",
  #    "-app-port", "8080",
  #    "-components-path", "./components"]   
  #   volumes:
  #     - "./dapr/docker-components/:/components"
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #     booking-processor-1:
  #       condition: service_started
  #   network_mode: "service:booking-processor-1"

  # booking-processor-2:
  #   image: ${DOCKER_REGISTRY-}go-booking-processor
  #   build:
  #     context: src\go\booking-processor
  # booking-processor-dapr-2:
  #   image: daprio/daprd:edge
  #   command: ["./daprd",
  #    "-app-id", "booking-processor",
  #    "-app-port", "8080",
  #    "-components-path", "./components"]   
  #   volumes:
  #     - "./dapr/docker-components/:/components"
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #     booking-processor-2:
  #       condition: service_started
  #   network_mode: "service:booking-processor-2"