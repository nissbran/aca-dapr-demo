---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: credits
data:
  config.yaml: |-
    receivers:
      filelog:
        include:
          - /var/log/pods/credits_*/*/*.log
        exclude:
          # Exclude logs from all containers named otel-collector
          - /var/log/pods/*/otel-collector/*.log
        start_at: end
        include_file_path: true
        include_file_name: false
        operators:
          # Find out which format is used by kubernetes
          - type: router
            id: get-format
            routes:
              - output: parser-docker
                expr: 'body matches "^\\{"'
              - output: parser-crio
                expr: 'body matches "^[^ Z]+ "'
              - output: parser-containerd
                expr: 'body matches "^[^ Z]+Z"'
          # Parse CRI-O format
          - type: regex_parser
            id: parser-crio
            regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout_type: gotime
              layout: '2006-01-02T15:04:05.999999999Z07:00'
          # Parse CRI-Containerd format
          - type: regex_parser
            id: parser-containerd
            regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          # Parse Docker format
          - type: json_parser
            id: parser-docker
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          # Extract metadata from file path
          - type: regex_parser
            id: extract_metadata_from_filepath
            regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
            parse_from: attributes["log.file.path"]
            cache:
              size: 128  # default maximum amount of Pods per Node is 110
          # Update body field after finishing all parsing
          - type: move
            from: attributes.log
            to: body
          # Rename attributes
          - type: move
            from: attributes.stream
            to: attributes["log.iostream"]
          - type: move
            from: attributes.container_name
            to: resource["k8s.container.name"]
          - type: move
            from: attributes.namespace
            to: resource["k8s.namespace.name"]
          - type: move
            from: attributes.pod_name
            to: resource["k8s.pod.name"]
          - type: move
            from: attributes.restart_count
            to: resource["k8s.container.restart_count"]
          - type: move
            from: attributes.uid
            to: resource["k8s.pod.uid"]

    processors:
      attributes:
        actions:
          - key: k8s.cluster.name
            value: $CLUSTER_NAME
            action: insert
          - key: environment
            value: $ENVIRONMENT
            action: insert
          - key: log.file.path
            action: delete

      transform:
        error_mode: ignore
        log_statements:
          - context: log
            statements:
              # Parse body as JSON and merge the resulting map with the cache map, ignoring non-json bodies.
              # cache is a field exposed by OTTL that is a temporary storage place for complex operations.
              - merge_maps(cache, ParseJSON(body), "upsert") where IsMatch(body, "^\\{") 
                
              # Set attributes using the values merged into cache.
              # If the attribute doesn't exist in cache then nothing happens.
              - set(attributes["request.method"], cache["RequestMethod"])
              - set(attributes["request.statuscode"], cache["StatusCode"])
              - set(attributes["request.path"], cache["RequestPath"])
              - set(attributes["request.elapsed"], cache["Elapsed"])
              - set(attributes["request.id"], cache["RequestId"])

              - set(attributes["meta.namespace"], cache["namespace"])
              - set(attributes["meta.application"], cache["application"])
              - set(attributes["meta.team"], cache["team"])

              # - set(severity_number, SEVERITY_NUMBER_INFO) where IsString(cache["@l"]) and IsMatch(cache["@l"], "Information")
              # - set(severity_number, SEVERITY_NUMBER_WARN) where IsString(cache["@l"]) and IsMatch(cache["@l"], "Warning")
              # - set(severity_number, SEVERITY_NUMBER_ERROR) where IsString(cache["@l"]) and IsMatch(cache["@l"], "Error")
              - set(severity_text, cache["@l"])
              - set(body, cache["@m"])
              
              # To access nested maps you can chain index ([]) operations.
              # If nested or attr3 do no exist in cache then nothing happens.
              #- set(attributes["nested.attr3"], cache["nested"]["attr3"])

      # k8sattributes processor to get the metadata from K8s
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            #- k8s.cluster.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time
            #- k8s.cluster.uid
          # Pod labels which can be fetched via K8sattributeprocessor
          # labels:
          #   - tag_name: key1
          #     key: label1
          #     from: pod
          #   - tag_name: key2
          #     key: label2
          #     from: pod
        # Pod association using resource attributes and connection
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: connection

    exporters:
      debug:
      otlphttp/seq:
        endpoint: http://seq:5341/ingest/otlp
    service:
      pipelines:
        logs:
          receivers: [filelog]
          processors: [k8sattributes, transform, attributes]
          exporters: [debug, otlphttp/seq]

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: otel-collector
  namespace: credits
  labels:
    app: opentelemetry
    component: otel-collector
spec:
  selector:
    matchLabels:
      app: opentelemetry
      component: otel-collector
  template:
    metadata:
      labels:
        app: opentelemetry
        component: otel-collector
    spec:
      containers:
      - name: otel-collector
        image: otel/opentelemetry-collector-contrib:0.88.0
        env:
        - name: CLUSTER_NAME
          value: "credits-cluster"
        - name: ENVIRONMENT
          value: "dev"
        resources:
          limits:
            cpu: 100m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - mountPath: /var/log
          name: varlog
          readOnly: true
        - mountPath: /var/lib/docker/containers
          name: varlibdockercontainers
          readOnly: true
        - mountPath: /etc/otelcol-contrib/config.yaml
          name: data
          subPath: config.yaml
          readOnly: true
      terminationGracePeriodSeconds: 30
      serviceAccountName: collector
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: data
        configMap:
          name: otel-collector-config

---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: credits
  labels:
    app: opentelemetry
    component: otel-collector
spec:
  ports:
  - name: metrics # Default endpoint for querying metrics.
    port: 8888
  selector:
    component: otel-collector
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: collector
  namespace: credits
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector
rules:
- apiGroups: [""]
  resources: ["pods", "namespaces"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["replicasets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector
subjects:
- kind: ServiceAccount
  name: collector
  namespace: credits
roleRef:
  kind: ClusterRole
  name: otel-collector
  apiGroup: rbac.authorization.k8s.io
